{"version":3,"file":"splitpanel.js","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../src/toolkit.js","../src/splitType.js","../src/index.js"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\r\n * get the top z-index in the given element\r\n * @param {HTMLElement} _element the container element, document.body will be taken as default if this parameter is ignored\r\n * @returns {Number} the top z-index\r\n */\r\nexport function getTopZIndex(_element) {\r\n    return [...(_element || document.body).querySelectorAll(\"*\")].reduce((r, e) => \r\n                Math.max(r, Number(window.getComputedStyle(e).zIndex) || 0), \r\n            0) + 1;\r\n}\r\n\r\n/**\r\n * assert\r\n * @param {*} _cond the condition the be asserted\r\n * @param {*} _error the error will be throw if fail\r\n * @returns {*} the same as the \"_cond\" parameter\r\n */\r\nexport function assert(_cond, _error) {\r\n    if (_cond) {\r\n        return _cond;\r\n    } else {\r\n        throw _error;\r\n    }\r\n}\r\n\r\n/**\r\n * get the number value from a style value\r\n * @param {*} _style the style value\r\n * @param {*} _default the default value using when the style value doesn't contain number value, 0 will be taken if this parameter is ignored.\r\n * @returns {Number} the number value in the style\r\n */\r\nexport function NumberFromStyle(_style, _default = 0) {\r\n    _style = String(_style).replace(/\\D+$/, \"\");\r\n    return (_style && Number(_style)) || _default;\r\n}\r\n\r\n/**\r\n * get the coordinate of an event in the asix of the given element\r\n * @param {Event} _e the event\r\n * @param {HTMLElement} _element the element\r\n * @returns {Object} {x, y}\r\n */\r\nexport function eventCoordinateFromElement(_e, _element) {\r\n    let x = 0;\r\n    let y = 0;\r\n    while (_element) {\r\n        x += _element.offsetLeft - _element.scrollLeft + _element.clientLeft;\r\n        y += _element.offsetTop - _element.scrollTop + _element.clientTop;\r\n        _element = _element.offsetParent;\r\n    }\r\n\r\n    x = _e.pageX - x;\r\n    y = _e.pageY - y;\r\n    return { x, y };\r\n}","/**\r\n * generate a instance as type of the splitpanel\r\n * @param {String} _type \"vertical\" or \"horizontal\"\r\n * @returns {Object} the object of the type\r\n */\r\nexport default function (_type) {\r\n    (_type instanceof Array) && (_type = _type[0]);\r\n    (_type === \"vertical\") || (_type = \"horizontal\");\r\n    const ret = {\r\n        s: _type,\r\n        toString: function () { return _type; }\r\n    };\r\n    Object.defineProperties(ret, {\r\n        isHorizontal: {\r\n            value: (_type === \"horizontal\"),\r\n            writable: false\r\n        },\r\n        isVertical: {\r\n            value: (_type !== \"horizontal\"),\r\n            writable: false\r\n        },\r\n        minSize: {\r\n            value: (_type === \"horizontal\") ? \"minWidth\" : \"minHeight\",\r\n            writable: false\r\n        },\r\n        maxSize: {\r\n            value: (_type === \"horizontal\") ? \"maxWidth\" : \"maxHeight\",\r\n            writable: false\r\n        },\r\n        clientSize: {\r\n            value: (_type === \"horizontal\") ? \"clientWidth\" : \"clientHeight\",\r\n            writable: false\r\n        },\r\n        size: {\r\n            value: (_type === \"horizontal\") ? \"width\" : \"height\",\r\n            writable: false\r\n        },\r\n        start: {\r\n            value: (_type === \"horizontal\") ? \"offsetLeft\" : \"offsetTop\",\r\n            writable: false\r\n        },\r\n        setStart: {\r\n            value: (_type === \"horizontal\") ? \"left\" : \"top\",\r\n            writable: false\r\n        },\r\n        beginMargin: {\r\n            value: (_type === \"horizontal\") ? \"marginLeft\" : \"marginTop\",\r\n            writable: false\r\n        },\r\n        endMargin: {\r\n            value: (_type === \"horizontal\") ? \"marginRight\" : \"marginBottom\",\r\n            writable: false\r\n        },\r\n        eventPos: {\r\n            value: (_type === \"horizontal\") ? \"x\" : \"y\",\r\n            writable: false\r\n        }\r\n    });\r\n    return ret;\r\n}","import { getTopZIndex, eventCoordinateFromElement, NumberFromStyle, assert } from \"./toolkit\";\r\nimport SplitType from \"./splitType\";\r\n\r\n// the private member\r\nconst $private = Symbol(\"split.panel.js\");\r\n\r\nfunction resizePanel(_posDelta, _index) {\r\n    if (_posDelta !== 0) {\r\n        // prepare the vars for calculating the information for modifying panels\r\n        const type = this[$private].type;\r\n        const modifyPanels = [];\r\n        let sizeExpand = 0;\r\n        const { indexStep, expandIndex, expandRecFn } = (_posDelta > 0) ? {\r\n            indexStep: 1,\r\n            expandIndex: _index - 1,\r\n            expandRecFn: Array.prototype.unshift\r\n        } : (_posDelta = -_posDelta, {\r\n            indexStep: -1,\r\n            expandIndex: _index--,\r\n            expandRecFn: Array.prototype.push\r\n        });\r\n\r\n        // calculate the information for modifying panels\r\n        for (let panel = this.querySelector(`:scope>[d-split-panel=\"${_index}\"]`);\r\n                panel && (_posDelta > 0); \r\n                panel = this.querySelector(`:scope>[d-split-panel=\"${_index += indexStep}\"]`)) {\r\n            const style = getComputedStyle(panel);\r\n            const minSize = NumberFromStyle(style[type.minSize]);\r\n            (minSize < 0) && (minSize = 0);\r\n            const size = NumberFromStyle(style[type.size], minSize);\r\n            let sizeDelta = size - minSize;\r\n            if (sizeDelta > _posDelta) {\r\n                sizeDelta = _posDelta;\r\n            }\r\n            if (sizeDelta > 0) {\r\n                modifyPanels.push({\r\n                    panel,\r\n                    index: _index,\r\n                    size: size - sizeDelta\r\n                });\r\n                _posDelta -= sizeDelta;\r\n                sizeExpand += sizeDelta;\r\n            } else {\r\n                modifyPanels.push({\r\n                    panel,\r\n                    index: _index,\r\n                    size: undefined\r\n                });\r\n            }\r\n        }\r\n        const expandPanel = this.querySelector(`:scope>[d-split-panel=\"${expandIndex}\"]`);\r\n        expandPanel && (sizeExpand > 0) && expandRecFn.call(modifyPanels, {\r\n            panel: expandPanel,\r\n            index: expandIndex,\r\n            size: NumberFromStyle(getComputedStyle(expandPanel)[type.size]) + sizeExpand\r\n        });\r\n        \r\n        // modify the panels\r\n        modifyPanels.forEach(({panel, index, size}) => {\r\n            if (size !== undefined) {\r\n                panel.style[type.size] = `${size}px`;\r\n            }\r\n            const bar = this.querySelector(`:scope>[d-split-bar=\"${index}\"]`);\r\n            bar && (bar.style[type.setStart] = `${panel[type.start]}px`);\r\n        });\r\n\r\n        return (sizeExpand > 0);\r\n    }\r\n}\r\n\r\n/**\r\n * the event handlers of the splitpanel\r\n * @ignore\r\n */\r\nconst eventHandlers = {\r\n    /**\r\n     * handler of auto swap the size of the panel\r\n     * @param {*} _e \r\n     */\r\n    onAutoSwap(_e) {\r\n        let panelIndex;\r\n        // peek the index of panel that will be swap\r\n        if (_e.type === \"dblclick\") {\r\n            panelIndex = _e.target ? NumberFromStyle(_e.target.getAttribute(\"d-split-bar\"), -1) : -1;\r\n        } else {\r\n            for (let item of _e.composedPath()) {\r\n                panelIndex = (item instanceof HTMLElement ? NumberFromStyle(item.getAttribute(\"d-split-panel\"), -1) : -1);\r\n                if (panelIndex >= 0) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // processing swap\r\n        if (panelIndex >= 0) {\r\n            const splitObj = this[$private];\r\n            const opt = (splitObj.opt || {});\r\n            if (_e.type !== \"dblclick\" || opt.autoswap) {\r\n                const panel = this.querySelector(`:scope>*[d-split-panel=\"${panelIndex}\"]`);\r\n                if (panel) {\r\n                    const type = splitObj.type;\r\n                    const style = getComputedStyle(panel);\r\n                    const minSize = NumberFromStyle(style[type.minSize]);\r\n                    const size = NumberFromStyle(style[type.size]);\r\n                    let posDelta;\r\n                    if (minSize < size) {\r\n                        posDelta = size - minSize;\r\n                        panel.setAttribute(\"d-split-autoswap\", size);\r\n                    } else {\r\n                        posDelta = minSize - (NumberFromStyle(panel.getAttribute(\"d-split-autoswap\")) || (minSize + (Number(opt.swapsize) || 26)));\r\n                    }\r\n                    if (panelIndex === 0) {\r\n                        panelIndex = 1;\r\n                        posDelta = -posDelta;\r\n                    }\r\n                    resizePanel.call(this, posDelta, panelIndex);\r\n                }\r\n            }\r\n            _e.stopPropagation();\r\n            _e.preventDefault();\r\n        }\r\n    },\r\n    /**\r\n     * handler of mouseup\r\n     * @param {*} _e \r\n     */\r\n    onMouseUp(_e) {\r\n        const splitObj = this[$private];\r\n        if (splitObj) {\r\n            splitObj.currentIndex = undefined;\r\n            window.removeEventListener(\"mousemove\", splitObj.onMouseMove)\r\n        }\r\n    },\r\n    /**\r\n     * handler of mousemove\r\n     * @param {*} _e \r\n     */\r\n    onMouseMove(_e) {\r\n        const splitObj = this[$private];\r\n        if (splitObj) {\r\n            // peek the movement information\r\n            const type = splitObj.type;\r\n            let pos = eventCoordinateFromElement(_e, this)[type.eventPos];\r\n            const containerSize = this[type.clientSize];\r\n            if (pos < 0) {\r\n                pos = 0;\r\n            } else if (pos >= containerSize) {\r\n                pos = containerSize - 1;\r\n            }\r\n            resizePanel.call(this, pos - splitObj.lastPos, splitObj.currentIndex) && (splitObj.lastPos = pos);\r\n        }\r\n    },\r\n    /**\r\n     * handler of mousedown\r\n     * @param {*} _e \r\n     */\r\n    onMouseDown(_e) {\r\n        const splitObj = this[$private];\r\n        const currentIndex = _e.target ? NumberFromStyle(_e.target.getAttribute(\"d-split-bar\")) : 0;\r\n        if (splitObj && currentIndex > 0) {\r\n            splitObj.currentIndex = currentIndex;\r\n            splitObj.lastPos = eventCoordinateFromElement(_e, this)[splitObj.type.eventPos];\r\n            window.addEventListener(\"mousemove\", splitObj.onMouseMove);\r\n            window.addEventListener(\"mouseup\", splitObj.onMouseUp, { once: true });\r\n            _e.stopPropagation();\r\n            _e.preventDefault();\r\n        }\r\n    },\r\n    /**\r\n     * handler of resize\r\n     */\r\n    onResize() {\r\n        arrangeView(this, this[$private]);\r\n    }\r\n}\r\n\r\n/**\r\n * arrange the total split view\r\n * @param {HTMLElement} _containerElement the HTMLElement as the container of the split view \r\n * @param {Object} _splitObj the private data of the split view\r\n * @ignore\r\n */\r\nfunction arrangeView(_containerElement, _splitObj) {\r\n    const type = _splitObj.type;\r\n\r\n    // get all contents and their attributes\r\n    const contents = [];\r\n    let lastEndMargin = 0;\r\n    [..._containerElement.querySelectorAll(\":scope>*:not(.-split-bar)\")].forEach((element, index) => {\r\n        element.classList.add(\"-split-panel\");\r\n        element.setAttribute(\"d-split-panel\", index);\r\n        const style = getComputedStyle(element);\r\n        let minSize = NumberFromStyle(style[type.minSize]);\r\n        (minSize < 0) && (minSize = 0);\r\n        let maxSize = NumberFromStyle(style[type.maxSize]);\r\n        (maxSize < 0) && (maxSize = 0);\r\n        const size = NumberFromStyle(style[type.size], minSize);\r\n        contents.push({\r\n            element,\r\n            minSize,\r\n            maxSize,\r\n            size,\r\n            index,\r\n            margin: lastEndMargin + NumberFromStyle(style[type.beginMargin]),\r\n            auto: Boolean(element.getAttribute(\"d-split-auto\"))\r\n        });\r\n        lastEndMargin = NumberFromStyle(style[type.endMargin]);\r\n    });\r\n\r\n    // calculate size of each content\r\n    const containerSize = _containerElement[type.clientSize] - contents.reduce((a, b) => (Number(a) || a.margin) + b.margin);\r\n    let totalMinSize = 0, totalSpecifiedSize = 0, autoCount = 0, totalAutoMinSize = 0;\r\n    contents.forEach(content => {\r\n        totalMinSize += content.minSize;\r\n        content.auto ? (autoCount ++, totalAutoMinSize += content.minSize) : (totalSpecifiedSize += content.size);\r\n    });\r\n    let totalAutoSize = containerSize - totalSpecifiedSize;\r\n    if (totalAutoSize < totalAutoMinSize) {\r\n        let deltaSize = totalAutoMinSize - totalAutoSize;\r\n        contents.forEach(content => {\r\n            if (deltaSize > 0 && !content.auto) {\r\n                let itemDelta = content.size - content.minSize;\r\n                if (itemDelta > 0) {\r\n                    if (itemDelta >= deltaSize) {\r\n                        itemDelta = deltaSize;\r\n                    }\r\n                    content.size -= itemDelta;\r\n                    deltaSize -= itemDelta;\r\n                }\r\n            }\r\n        });\r\n        totalAutoSize = totalAutoMinSize;\r\n    }\r\n    let eachAutoSize = (autoCount > 0) ? (totalAutoSize / autoCount) \r\n                        : (contents[0].element.setAttribute(\"d-split-auto\", \"true\"), contents[0].auto = true, totalAutoSize);\r\n    \r\n    // locating\r\n    const bars = [null, ..._containerElement.querySelectorAll(\":scope>.-split-bar\")];\r\n    contents.forEach(({ element, index, auto, size }) => {\r\n        element.style[type.size] = `${auto ? eachAutoSize: size}px`;\r\n        const bar = bars[index];\r\n        if (bar) {\r\n            bar.setAttribute(\"d-split-bar\", index);\r\n            bar.style[type.setStart] = `${element[type.start]}px`;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * initialize a splite view\r\n * @param {HTMLElement} _containerElement the element of the split view container\r\n * @param {String|Object} [_typeOrOpt] type of the split view or the options of the view.\r\n * @param {String} [_typeOrOpt.type=\"horizontal\"] type of the split view, can be set as \"horizontal\" or \"vertical\"\r\n * @param {Boolean} [_typeOrOpt.autoswap=true] if the panel can be swap size when double click the split bar\r\n * @param {Number} [_typeOrOpt.swapsize=26] the delta size when swaping a panel to big status if the panel has no specified size\r\n */\r\n function init(_containerElement, _typeOrOpt) {\r\n    assert(_containerElement instanceof HTMLElement, \"the container element must be an instance of HTMLElement\");\r\n\r\n    // prepare the private data\r\n    const { type, opt } = (typeof _typeOrOpt === \"string\" ? { type: _typeOrOpt, opt: {}} : {type: undefined, opt: _typeOrOpt || {}});\r\n    (opt.autoswap === undefined) && (opt.autoswap = true);\r\n    const splitObj = (_containerElement[$private] = { type: SplitType(type), opt });\r\n    for (let event in eventHandlers) {\r\n        splitObj[event] = eventHandlers[event].bind(_containerElement);\r\n    }\r\n\r\n    // initialize the container's attributes and event handlers\r\n    _containerElement.style.padding = \"0px !important\";\r\n    _containerElement.classList.add(\"-split-container\", `-split-container-${splitObj.type}`);\r\n    _containerElement.addEventListener(\"mousedown\", splitObj.onMouseDown);\r\n    _containerElement.addEventListener(\"dblclick\", splitObj.onAutoSwap);\r\n    _containerElement.addEventListener(\"splitautoswap\", splitObj.onAutoSwap);\r\n    const resizeObserver = new ResizeObserver(splitObj.onResize);\r\n    resizeObserver.observe(_containerElement);\r\n\r\n    // initialize the view\r\n    resetView(_containerElement);\r\n}\r\n\r\n/**\r\n * dispose a split view\r\n * @param {HTMLElement} _containerElement the element of the split view container\r\n */\r\nfunction dispose(_containerElement) {\r\n    if (_containerElement[$private] && (_containerElement instanceof HTMLElement)) {\r\n        const splitObj = _containerElement[$private];\r\n        // remove the event handler;\r\n        _containerElement.removeEventListener(\"mousedown\", splitObj.onMouseDown);\r\n        window.removeEventListener(\"mouseup\", splitObj.onMouseUp);\r\n        window.removeEventListener(\"mousemove\", splitObj.onMouseMove);\r\n        _containerElement.removeEventListener(\"dblclick\", splitObj.onAutoSwap);\r\n        _containerElement.removeEventListener(\"splitautoswap\", splitObj.onAutoSwap);\r\n\r\n        // remove the addition element and attribute\r\n        [..._containerElement.querySelectorAll(\":scope>.-split-bar\")].forEach(item => item.remove());\r\n        [..._containerElement.querySelectorAll(\":scope>.-split-panel\")].forEach(item => {\r\n            item.classList.remove(\"-split-panel\");\r\n            item.removeAttribute(\"d-split-panel\");\r\n            item.removeAttribute(\"d-split-autoswap\");\r\n        });\r\n        _containerElement.classList.remove(\"-split-container\", `-split-container-${splitObj.type}`);\r\n\r\n        // release the private data\r\n        _containerElement[$private] = undefined;\r\n        delete _containerElement[$private];\r\n    }\r\n}\r\n\r\n/**\r\n * trigger swaping the size of the panel\r\n * @param {HTMLElement} _element the element of the panel or an descendant element in the panel\r\n */\r\nfunction swap(_element) {\r\n    assert(_element instanceof HTMLElement, \"the parameter must be an instance of HTMLElement\");\r\n    const event = new CustomEvent(\"splitautoswap\", { bubbles: true });\r\n    _element.dispatchEvent(event);\r\n}\r\n\r\n/**\r\n * reset the split view.\r\n * If change the contents of the view, you must call this function to reset the view.\r\n * @param {HTMLElement} _containerElement the element of the splite view container\r\n */\r\n function resetView(_containerElement) {\r\n    assert(_containerElement instanceof HTMLElement, \"the container element must be an instance of HTMLElement\");\r\n    const splitObj = assert(_containerElement[$private], \"the container referenced not been initialized\");\r\n\r\n    [..._containerElement.querySelectorAll(\":scope>.-split-bar\")].forEach(item => item.remove());\r\n\r\n    const contentCount = _containerElement.children.length;\r\n    if (contentCount > 1) {\r\n        const topZIndex = getTopZIndex(_containerElement);\r\n        _containerElement.insertAdjacentHTML(\"beforeend\", `<div class=\"-split-bar\" style=\"z-index:${topZIndex};\" d-split-bar=\"0\"></div>`.repeat(contentCount - 1));\r\n    }\r\n\r\n    arrangeView(_containerElement, splitObj);\r\n}\r\n\r\nexport default {\r\n    init,\r\n    dispose,\r\n    resetView,\r\n    swap,\r\n    $version: __VERSION__ || \"unknown\",\r\n    $stamp: __STAMP__ || \"\"\r\n};"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_toConsumableArray","isArray","arrayLikeToArray","arrayWithoutHoles","iter","Symbol","iterator","Object","from","iterableToArray","o","minLen","n","prototype","toString","call","slice","constructor","name","test","unsupportedIterableToArray","TypeError","nonIterableSpread","assert","_cond","_error","NumberFromStyle","_style","_default","String","replace","Number","eventCoordinateFromElement","_e","_element","x","y","offsetLeft","scrollLeft","clientLeft","offsetTop","scrollTop","clientTop","offsetParent","pageX","pageY","_type","ret","s","defineProperties","isHorizontal","value","writable","isVertical","minSize","maxSize","clientSize","size","start","setStart","beginMargin","endMargin","eventPos","$private","resizePanel","_posDelta","_index","type","this","modifyPanels","sizeExpand","indexStep","expandIndex","expandRecFn","unshift","push","panel","querySelector","style","getComputedStyle","sizeDelta","index","undefined","expandPanel","forEach","bar","_this","eventHandlers","onAutoSwap","panelIndex","target","getAttribute","composedPath","item","HTMLElement","splitObj","opt","autoswap","posDelta","setAttribute","swapsize","stopPropagation","preventDefault","onMouseUp","currentIndex","window","removeEventListener","onMouseMove","pos","containerSize","lastPos","onMouseDown","addEventListener","once","onResize","arrangeView","_containerElement","_splitObj","contents","lastEndMargin","querySelectorAll","element","classList","add","margin","auto","Boolean","reduce","a","b","totalSpecifiedSize","autoCount","totalAutoMinSize","content","totalAutoSize","deltaSize","itemDelta","eachAutoSize","bars","resetView","remove","contentCount","children","topZIndex","document","body","r","e","Math","max","zIndex","insertAdjacentHTML","repeat","init","_typeOrOpt","SplitType","event","bind","padding","ResizeObserver","observe","dispose","removeAttribute","swap","CustomEvent","bubbles","dispatchEvent","$version","$stamp"],"mappings":"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"}